{"version":3,"sources":["../../../src/shared/bodies/Peg.js"],"names":["PIXI","window","require","Peg","x","y","type","createPhysics","createSprite","body","sprite","fillColor","options","friction","PEG_FRICTION","restitution","PEG_RESTITUTION","Bodies","circle","PEG_RADIUS","isStatic","position","label","isShrinking","Graphics","beginFill","PEG_COLOR","drawCircle","endFill","console","log","GameObject"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAIA,aAAJ;;AAEA,IAAI,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9BD,SAAOE,QAAQ,SAAR,CAAP;AACD;;IAEoBC,G;;;AACnB,qBAAsB;AAAA,QAARC,CAAQ,QAARA,CAAQ;AAAA,QAALC,CAAK,QAALA,CAAK;;AAAA;;AAAA,0GACd,EAAED,IAAF,EAAKC,IAAL,EADc;;AAEpB,UAAKC,IAAL,GAAY,KAAZ;;AAEA,UAAKC,aAAL;AACA,UAAKC,YAAL;;AAEA;AACA;AACA,UAAKC,IAAL,CAAUC,MAAV,GAAmB,MAAKA,MAAxB;AACA,UAAKA,MAAL,CAAYD,IAAZ,GAAmB,MAAKA,IAAxB;AACA,UAAKC,MAAL,CAAYC,SAAZ,GAAwB,QAAxB;AAXoB;AAYrB;;;;oCAEe;AACd,UAAIC,UAAU;AACZC,kBAAUC,oBADE;AAEZC,qBAAaC;AAFD,OAAd;;AAKA,WAAKP,IAAL,GAAYQ,iBAAOC,MAAP,CAAc,KAAKd,CAAnB,EAAsB,KAAKC,CAA3B,EAA8Bc,kBAA9B,EAA0CP,OAA1C,CAAZ;AACA,WAAKH,IAAL,CAAUW,QAAV,GAAqB,IAArB;AACA,WAAKX,IAAL,CAAUY,QAAV,CAAmBjB,CAAnB,GAAuB,KAAKA,CAA5B;AACA,WAAKK,IAAL,CAAUY,QAAV,CAAmBhB,CAAnB,GAAuB,KAAKA,CAA5B;AACA,WAAKI,IAAL,CAAUa,KAAV,GAAkB,KAAKhB,IAAvB;AACA,WAAKG,IAAL,CAAUc,WAAV,GAAwB,KAAxB;AACD;;;mCAEc;AACb,WAAKb,MAAL,GAAc,IAAIV,KAAKwB,QAAT,EAAd;AACA,WAAKd,MAAL,CAAYe,SAAZ,CAAsBC,iBAAtB;AACA,WAAKhB,MAAL,CAAYiB,UAAZ,CAAuB,KAAKvB,CAA5B,EAA+B,KAAKC,CAApC,EAAuCc,kBAAvC;AACA,WAAKT,MAAL,CAAYkB,OAAZ;AACAC,cAAQC,GAAR,CAAY,KAAKpB,MAAjB;AACD;;;;EAnC8BqB,oB;;kBAAZ5B,G","file":"Peg.js","sourcesContent":["import { Bodies } from 'matter-js';\nimport { PEG_FRICTION, PEG_RESTITUTION, PEG_RADIUS } from '../constants/bodies';\nimport { PEG_COLOR } from '../constants/colors';\nimport GameObject from './GameObject';\n\nlet PIXI;\n\nif (typeof window === 'object') {\n  PIXI = require('pixi.js');\n}\n\nexport default class Peg extends GameObject {\n  constructor({ x, y }) {\n    super({ x, y });\n    this.type = 'peg';\n\n    this.createPhysics();\n    this.createSprite();\n\n    // Sprite and Body have references to each other so that we can\n    // change renderer properties based on physics collisions\n    this.body.sprite = this.sprite;\n    this.sprite.body = this.body;\n    this.sprite.fillColor = 0x0000FF;\n  }\n\n  createPhysics() {\n    let options = {\n      friction: PEG_FRICTION,\n      restitution: PEG_RESTITUTION,\n    }\n\n    this.body = Bodies.circle(this.x, this.y, PEG_RADIUS, options);\n    this.body.isStatic = true;\n    this.body.position.x = this.x;\n    this.body.position.y = this.y;\n    this.body.label = this.type;\n    this.body.isShrinking = false;\n  }\n\n  createSprite() {\n    this.sprite = new PIXI.Graphics();\n    this.sprite.beginFill(PEG_COLOR);\n    this.sprite.drawCircle(this.x, this.y, PEG_RADIUS);\n    this.sprite.endFill();\n    console.log(this.sprite)\n  }\n}\n"]}