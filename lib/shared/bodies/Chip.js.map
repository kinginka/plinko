{"version":3,"sources":["../../../src/shared/bodies/Chip.js"],"names":["PIXI","window","require","Chip","x","y","type","createPhysics","createSprite","engine","Events","on","sprite","position","body","rotation","angle","chip","Sprite","fromImage","height","CHIP_DIAMETER","width","anchor","set","options","restitution","CHIP_RESTITUTION","friction","CHIP_FRICTION","Bodies","circle","CHIP_RADIUS","GameObject"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAEA,IAAIA,aAAJ;;AAEA,IAAI,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9BD,SAAOE,QAAQ,SAAR,CAAP;AACD;;IAEoBC,I;;;AACnB,sBAAsB;AAAA,QAARC,CAAQ,QAARA,CAAQ;AAAA,QAALC,CAAK,QAALA,CAAK;;AAAA;;AAAA,4GACd,EAAED,IAAF,EAAKC,IAAL,EADc;;AAEpB,UAAKC,IAAL,GAAY,MAAZ;AACA,UAAKC,aAAL;AACA,QAAI,QAAON,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAAE,YAAKO,YAAL;AAAqB;AAJnC;AAKrB;;;;2CAEsBC,M,EAAQ;AAAA;;AAC7BC,uBAAOC,EAAP,CAAUF,MAAV,EAAkB,aAAlB,EAAiC,YAAM;AACrC,eAAKG,MAAL,CAAYC,QAAZ,CAAqBT,CAArB,GAAyB,OAAKU,IAAL,CAAUD,QAAV,CAAmBT,CAA5C;AACA,eAAKQ,MAAL,CAAYC,QAAZ,CAAqBR,CAArB,GAAyB,OAAKS,IAAL,CAAUD,QAAV,CAAmBR,CAA5C;AACA,eAAKO,MAAL,CAAYG,QAAZ,GAAuB,OAAKD,IAAL,CAAUE,KAAjC;AACA,eAAKZ,CAAL,GAAS,OAAKU,IAAL,CAAUD,QAAV,CAAmBT,CAA5B;AACA,eAAKC,CAAL,GAAS,OAAKS,IAAL,CAAUD,QAAV,CAAmBR,CAA5B;AACD,OAND;AAOD;;;mCAEc;AACb,UAAMY,OAAO,IAAIjB,KAAKkB,MAAL,CAAYC,SAAhB,CAA0B,iCAA1B,CAAb;AACAF,WAAKJ,QAAL,CAAcT,CAAd,GAAkB,KAAKA,CAAvB;AACAa,WAAKJ,QAAL,CAAcR,CAAd,GAAkB,KAAKA,CAAvB;AACAY,WAAKG,MAAL,GAAcC,qBAAd;AACAJ,WAAKK,KAAL,GAAaD,qBAAb;AACAJ,WAAKM,MAAL,CAAYC,GAAZ,CAAgB,GAAhB,EAAqB,GAArB;;AAEA,WAAKZ,MAAL,GAAcK,IAAd;AACD;;;oCAEe;AACd,UAAMQ,UAAU;AACdC,qBAAaC,wBADC;AAEdC,kBAAUC;AAFI,OAAhB;;AAKA,WAAKf,IAAL,GAAYgB,iBAAOC,MAAP,CAAc,KAAK3B,CAAnB,EAAsB,KAAKC,CAA3B,EAA8B2B,mBAA9B,EAA2CP,OAA3C,CAAZ;AACA,WAAKX,IAAL,CAAUD,QAAV,CAAmBT,CAAnB,GAAuB,KAAKA,CAA5B;AACA,WAAKU,IAAL,CAAUD,QAAV,CAAmBR,CAAnB,GAAuB,KAAKA,CAA5B;AACD;;;;EAtC+B4B,oB;;kBAAb9B,I","file":"Chip.js","sourcesContent":["import { Bodies } from 'matter-js';\nimport { CHIP_FRICTION, CHIP_RESTITUTION, CHIP_RADIUS, CHIP_DIAMETER } from '../constants/bodies';\nimport { CHIP_COLOR } from '../constants/colors';\nimport { Events } from 'matter-js'\nimport GameObject from './GameObject';\n\nlet PIXI;\n\nif (typeof window === 'object') {\n  PIXI = require('pixi.js');\n}\n\nexport default class Chip extends GameObject {\n  constructor({ x, y }) {\n    super({ x, y });\n    this.type = 'chip';\n    this.createPhysics();\n    if (typeof window === 'object') { this.createSprite() };\n  }\n\n  registerUpdateListener(engine) {\n    Events.on(engine, 'afterUpdate', () => {\n      this.sprite.position.x = this.body.position.x;\n      this.sprite.position.y = this.body.position.y;\n      this.sprite.rotation = this.body.angle;\n      this.x = this.body.position.x;\n      this.y = this.body.position.y;\n    })\n  }\n\n  createSprite() {\n    const chip = new PIXI.Sprite.fromImage('https://i.imgur.com/Q6GxA85.png');\n    chip.position.x = this.x;\n    chip.position.y = this.y;\n    chip.height = CHIP_DIAMETER;\n    chip.width = CHIP_DIAMETER;\n    chip.anchor.set(0.5, 0.5);\n\n    this.sprite = chip;\n  }\n\n  createPhysics() {\n    const options = {\n      restitution: CHIP_RESTITUTION,\n      friction: CHIP_FRICTION,\n    }\n\n    this.body = Bodies.circle(this.x, this.y, CHIP_RADIUS, options);\n    this.body.position.x = this.x;\n    this.body.position.y = this.y;\n  }\n}\n"]}