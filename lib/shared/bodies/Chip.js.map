{"version":3,"sources":["../../../src/shared/bodies/Chip.js"],"names":["PIXI","window","require","Chip","x","y","type","createPhysics","createSprite","sprite","Graphics","beginFill","drawCircle","CHIP_RADIUS","endFill","options","restitution","CHIP_RESTITUTION","friction","CHIP_FRICTION","body","Bodies","circle","position","stage","addChild","world","World","add"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAIA,aAAJ;;AAEA,IAAI,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9BD,SAAOE,QAAQ,SAAR,CAAP;AACD;;IAEoBC,I;AACnB,sBAAsB;AAAA,QAARC,CAAQ,QAARA,CAAQ;AAAA,QAALC,CAAK,QAALA,CAAK;;AAAA;;AACpB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,SAAKC,aAAL;AACA,QAAI,QAAON,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAAE,WAAKO,YAAL;AAAqB;AACxD;;;;mCAEc;AACb,WAAKC,MAAL,GAAc,IAAIT,KAAKU,QAAT,EAAd;AACA,WAAKD,MAAL,CAAYE,SAAZ,CAAsB,QAAtB;AACA,WAAKF,MAAL,CAAYG,UAAZ,CAAuB,KAAKR,CAA5B,EAA+B,KAAKC,CAApC,EAAuCQ,mBAAvC;AACA,WAAKJ,MAAL,CAAYK,OAAZ;AACD;;;oCAEe;AACd,UAAMC,UAAU;AACdC,qBAAaC,wBADC;AAEdC,kBAAUC;AAFI,OAAhB;;AAKA,WAAKC,IAAL,GAAYC,iBAAOC,MAAP,CAAc,KAAKlB,CAAnB,EAAsB,KAAKC,CAA3B,EAA8BQ,mBAA9B,EAA2CE,OAA3C,CAAZ;AACA,WAAKK,IAAL,CAAUG,QAAV,CAAmBnB,CAAnB,GAAuB,KAAKA,CAA5B;AACA,WAAKgB,IAAL,CAAUG,QAAV,CAAmBlB,CAAnB,GAAuB,KAAKA,CAA5B;AACD;;;kCAEamB,K,EAAO;AACnBA,YAAMC,QAAN,CAAe,KAAKhB,MAApB;AACD;;;gCAEWiB,K,EAAO;AACjBC,sBAAMC,GAAN,CAAUF,KAAV,EAAiB,KAAKN,IAAtB;AACD;;;;;;kBAjCkBjB,I","file":"Chip.js","sourcesContent":["import { Bodies, World } from 'matter-js';\nimport { CHIP_FRICTION, CHIP_RESTITUTION, CHIP_RADIUS } from '../constants/bodies';\nimport { CHIP_COLOR } from '../constants/colors';\n\nlet PIXI;\n\nif (typeof window === 'object') {\n  PIXI = require('pixi.js');\n}\n\nexport default class Chip {\n  constructor({ x, y }) {\n    this.x = x;\n    this.y = y;\n    this.type = 'chip';\n    this.createPhysics();\n    if (typeof window === 'object') { this.createSprite() };\n  }\n\n  createSprite() {\n    this.sprite = new PIXI.Graphics();\n    this.sprite.beginFill(0x334455);\n    this.sprite.drawCircle(this.x, this.y, CHIP_RADIUS);\n    this.sprite.endFill();\n  }\n\n  createPhysics() {\n    const options = {\n      restitution: CHIP_RESTITUTION,\n      friction: CHIP_FRICTION,\n    }\n\n    this.body = Bodies.circle(this.x, this.y, CHIP_RADIUS, options);\n    this.body.position.x = this.x;\n    this.body.position.y = this.y;\n  }\n\n  addToRenderer(stage) {\n    stage.addChild(this.sprite);\n  }\n\n  addToEngine(world) {\n    World.add(world, this.body);\n  }\n}\n"]}