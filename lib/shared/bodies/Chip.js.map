{"version":3,"sources":["../../../src/shared/bodies/Chip.js"],"names":["PIXI","window","require","Chip","x","y","type","createPhysics","createSprite","engine","Events","on","sprite","position","body","chip","Sprite","fromImage","height","width","anchor","set","options","restitution","CHIP_RESTITUTION","friction","CHIP_FRICTION","Bodies","circle","CHIP_RADIUS","stage","addChild","world","World","add"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAIA,aAAJ;;AAEA,IAAI,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9BD,SAAOE,QAAQ,SAAR,CAAP;AACD;;IAEoBC,I;AACnB,sBAAsB;AAAA,QAARC,CAAQ,QAARA,CAAQ;AAAA,QAALC,CAAK,QAALA,CAAK;;AAAA;;AACpB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,SAAKC,aAAL;AACA,QAAI,QAAON,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAAE,WAAKO,YAAL;AAAqB;AACxD;;;;2CAEsBC,M,EAAQ;AAAA;;AAC7BC,uBAAOC,EAAP,CAAUF,MAAV,EAAkB,aAAlB,EAAiC,YAAM;AACrC,cAAKG,MAAL,CAAYC,QAAZ,CAAqBT,CAArB,GAAyB,MAAKU,IAAL,CAAUD,QAAV,CAAmBT,CAA5C;AACA,cAAKQ,MAAL,CAAYC,QAAZ,CAAqBR,CAArB,GAAyB,MAAKS,IAAL,CAAUD,QAAV,CAAmBR,CAA5C;AACA,cAAKD,CAAL,GAAS,MAAKU,IAAL,CAAUD,QAAV,CAAmBT,CAA5B;AACA,cAAKC,CAAL,GAAS,MAAKS,IAAL,CAAUD,QAAV,CAAmBR,CAA5B;AACD,OALD;AAMD;;;mCAEc;AACb,UAAMU,OAAO,IAAIf,KAAKgB,MAAL,CAAYC,SAAhB,CAA0B,iCAA1B,CAAb;AACAF,WAAKF,QAAL,CAAcT,CAAd,GAAkB,KAAKA,CAAvB;AACAW,WAAKF,QAAL,CAAcR,CAAd,GAAkB,KAAKA,CAAvB;AACAU,WAAKG,MAAL,GAAc,EAAd;AACAH,WAAKI,KAAL,GAAa,EAAb;AACAJ,WAAKK,MAAL,CAAYC,GAAZ,CAAgB,GAAhB,EAAqB,GAArB;;AAEA,WAAKT,MAAL,GAAcG,IAAd;AACD;;;oCAEe;AACd,UAAMO,UAAU;AACdC,qBAAaC,wBADC;AAEdC,kBAAUC;AAFI,OAAhB;;AAKA,WAAKZ,IAAL,GAAYa,iBAAOC,MAAP,CAAc,KAAKxB,CAAnB,EAAsB,KAAKC,CAA3B,EAA8BwB,mBAA9B,EAA2CP,OAA3C,CAAZ;AACA,WAAKR,IAAL,CAAUD,QAAV,CAAmBT,CAAnB,GAAuB,KAAKA,CAA5B;AACA,WAAKU,IAAL,CAAUD,QAAV,CAAmBR,CAAnB,GAAuB,KAAKA,CAA5B;AACD;;;kCAEayB,K,EAAO;AACnBA,YAAMC,QAAN,CAAe,KAAKnB,MAApB;AACD;;;gCAEWoB,K,EAAO;AACjBC,sBAAMC,GAAN,CAAUF,KAAV,EAAiB,KAAKlB,IAAtB;AACD;;;;;;kBA9CkBX,I","file":"Chip.js","sourcesContent":["import { Bodies, World } from 'matter-js';\nimport { CHIP_FRICTION, CHIP_RESTITUTION, CHIP_RADIUS } from '../constants/bodies';\nimport { CHIP_COLOR } from '../constants/colors';\nimport { Events } from 'matter-js'\nlet PIXI;\n\nif (typeof window === 'object') {\n  PIXI = require('pixi.js');\n}\n\nexport default class Chip {\n  constructor({ x, y }) {\n    this.x = x;\n    this.y = y;\n    this.type = 'chip';\n    this.createPhysics();\n    if (typeof window === 'object') { this.createSprite() };\n  }\n\n  registerUpdateListener(engine) {\n    Events.on(engine, 'afterUpdate', () => {\n      this.sprite.position.x = this.body.position.x;\n      this.sprite.position.y = this.body.position.y;\n      this.x = this.body.position.x;\n      this.y = this.body.position.y;\n    })\n  }\n\n  createSprite() {\n    const chip = new PIXI.Sprite.fromImage('https://i.imgur.com/Q6GxA85.png');\n    chip.position.x = this.x;\n    chip.position.y = this.y;\n    chip.height = 20;\n    chip.width = 20;\n    chip.anchor.set(0.5, 0.5);\n\n    this.sprite = chip;\n  }\n\n  createPhysics() {\n    const options = {\n      restitution: CHIP_RESTITUTION,\n      friction: CHIP_FRICTION,\n    }\n\n    this.body = Bodies.circle(this.x, this.y, CHIP_RADIUS, options);\n    this.body.position.x = this.x;\n    this.body.position.y = this.y;\n  }\n\n  addToRenderer(stage) {\n    stage.addChild(this.sprite);\n  }\n\n  addToEngine(world) {\n    World.add(world, this.body);\n  }\n}\n"]}