{"version":3,"sources":["../../../src/shared/bodies/Chip.js"],"names":["PIXI","window","require","Chip","x","y","type","createPhysics","createSprite","body","sprite","engine","Events","on","position","rotation","angle","chip","Sprite","fromImage","height","CHIP_DIAMETER","width","anchor","set","options","restitution","CHIP_RESTITUTION","friction","CHIP_FRICTION","slop","Bodies","circle","CHIP_RADIUS","label","GameObject"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAEA,IAAIA,aAAJ;;AAEA,IAAI,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9BD,SAAOE,QAAQ,SAAR,CAAP;AACD;;IAEoBC,I;;;AACnB,sBAAsB;AAAA,QAARC,CAAQ,QAARA,CAAQ;AAAA,QAALC,CAAK,QAALA,CAAK;;AAAA;;AAAA,4GACd,EAAED,IAAF,EAAKC,IAAL,EADc;;AAEpB,UAAKC,IAAL,GAAY,MAAZ;AACA,UAAKC,aAAL;AACA,QAAI,QAAON,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAAE,YAAKO,YAAL;AAAqB;;AAEvD;AACA;AACA,UAAKC,IAAL,CAAUC,MAAV,GAAmB,MAAKA,MAAxB;AACA,UAAKA,MAAL,CAAYD,IAAZ,GAAmB,MAAKA,IAAxB;AAToB;AAUrB;;;;2CAEsBE,M,EAAQ;AAAA;;AAC7BC,uBAAOC,EAAP,CAAUF,MAAV,EAAkB,aAAlB,EAAiC,YAAM;AACrC,eAAKD,MAAL,CAAYI,QAAZ,CAAqBV,CAArB,GAAyB,OAAKK,IAAL,CAAUK,QAAV,CAAmBV,CAA5C;AACA,eAAKM,MAAL,CAAYI,QAAZ,CAAqBT,CAArB,GAAyB,OAAKI,IAAL,CAAUK,QAAV,CAAmBT,CAA5C;AACA,eAAKK,MAAL,CAAYK,QAAZ,GAAuB,OAAKN,IAAL,CAAUO,KAAjC;AACA,eAAKZ,CAAL,GAAS,OAAKK,IAAL,CAAUK,QAAV,CAAmBV,CAA5B;AACA,eAAKC,CAAL,GAAS,OAAKI,IAAL,CAAUK,QAAV,CAAmBT,CAA5B;AACD,OAND;AAOD;;;mCAEc;AACb,UAAMY,OAAO,IAAIjB,KAAKkB,MAAL,CAAYC,SAAhB,CAA0B,iCAA1B,CAAb;AACAF,WAAKH,QAAL,CAAcV,CAAd,GAAkB,KAAKA,CAAvB;AACAa,WAAKH,QAAL,CAAcT,CAAd,GAAkB,KAAKA,CAAvB;AACAY,WAAKG,MAAL,GAAcC,qBAAd;AACAJ,WAAKK,KAAL,GAAaD,qBAAb;AACAJ,WAAKM,MAAL,CAAYC,GAAZ,CAAgB,GAAhB,EAAqB,GAArB;;AAEA,WAAKd,MAAL,GAAcO,IAAd;AACD;;;oCAEe;AACd,UAAMQ,UAAU;AACdC,qBAAaC,wBADC;AAEdC,kBAAUC,qBAFI;AAGdC,cAAM;AAHQ,OAAhB;;AAMA,WAAKrB,IAAL,GAAYsB,iBAAOC,MAAP,CAAc,KAAK5B,CAAnB,EAAsB,KAAKC,CAA3B,EAA8B4B,mBAA9B,EAA2CR,OAA3C,CAAZ;AACA,WAAKhB,IAAL,CAAUyB,KAAV,GAAkB,KAAK5B,IAAvB;AACA,WAAKG,IAAL,CAAUK,QAAV,CAAmBV,CAAnB,GAAuB,KAAKA,CAA5B;AACA,WAAKK,IAAL,CAAUK,QAAV,CAAmBT,CAAnB,GAAuB,KAAKA,CAA5B;AACD;;;;EA7C+B8B,oB;;kBAAbhC,I","file":"Chip.js","sourcesContent":["import { Bodies } from 'matter-js';\nimport { CHIP_FRICTION, CHIP_RESTITUTION, CHIP_RADIUS, CHIP_DIAMETER } from '../constants/bodies';\nimport { CHIP_COLOR } from '../constants/colors';\nimport { Events } from 'matter-js'\nimport GameObject from './GameObject';\n\nlet PIXI;\n\nif (typeof window === 'object') {\n  PIXI = require('pixi.js');\n}\n\nexport default class Chip extends GameObject {\n  constructor({ x, y }) {\n    super({ x, y });\n    this.type = 'chip';\n    this.createPhysics();\n    if (typeof window === 'object') { this.createSprite() };\n\n    // Sprite and Body have references to each other so that we can\n    // change renderer properties based on physics collisions\n    this.body.sprite = this.sprite;\n    this.sprite.body = this.body;\n  }\n\n  registerUpdateListener(engine) {\n    Events.on(engine, 'afterUpdate', () => {\n      this.sprite.position.x = this.body.position.x;\n      this.sprite.position.y = this.body.position.y;\n      this.sprite.rotation = this.body.angle;\n      this.x = this.body.position.x;\n      this.y = this.body.position.y;\n    })\n  }\n\n  createSprite() {\n    const chip = new PIXI.Sprite.fromImage('https://i.imgur.com/OV7kVtt.png');\n    chip.position.x = this.x;\n    chip.position.y = this.y;\n    chip.height = CHIP_DIAMETER;\n    chip.width = CHIP_DIAMETER;\n    chip.anchor.set(0.5, 0.5);\n\n    this.sprite = chip;\n  }\n\n  createPhysics() {\n    const options = {\n      restitution: CHIP_RESTITUTION,\n      friction: CHIP_FRICTION,\n      slop: 0,\n    }\n\n    this.body = Bodies.circle(this.x, this.y, CHIP_RADIUS, options);\n    this.body.label = this.type;\n    this.body.position.x = this.x;\n    this.body.position.y = this.y;\n  }\n}\n"]}